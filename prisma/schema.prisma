// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id        String   @id @default(cuid())
  userId    String
  title     String @db.Text
  description String? @db.Text
  price     Float? @default(0) @db.DoublePrecision
  imageUrl  String? @db.Text
  isPublished Boolean @default(false) @db.Boolean

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  // @@fulltext([title, description])
  chapters Chapter[]
  purchases Purchase[]
}

model Attachment {
  id        String   @id @default(cuid())
  name      String
  url       String
  courseId  String
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade  )
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique

  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chapter {
  id        String   @id @default(cuid())
  title     String
  description String? @db.Text
  videoUrl  String? @db.Text
  position  Int
  isPublished Boolean @default(false) @db.Boolean
  isFree    Boolean @default(false) @db.Boolean



  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  muxData MuxData?
  userProgress UserProgress[]
  course    Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  @@index([courseId])
}

model MuxData {
  id        String   @id @default(cuid())
  assetId   String
  playbackId String?
  chapterId String @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}

model UserProgress {
  id        String   @id @default(cuid())
  userId    String
  chapterId String
  isCompleted Boolean @default(false) @db.Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  @@index([courseId])
  @@unique([userId, courseId])
}

model StipeCustomer {
  id        String   @id @default(cuid())
  userId    String   @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}